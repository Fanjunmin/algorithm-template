二分图
将一个图的点集分为两个独立的子点集, 独立是指子点集内不存在边
无向图是二分图的充要条件是: 至少有两个顶点, 且所有回路的长度为偶数

有向图G, n个点, m条边, 使用邻接表来存储
1. 染色法
时间内复杂度O(n+m)
for i:1~n
    对没有染色过的点进行dfs
    dfs (i)
        queue <- i
        将节点i染色
        while queue非空:
            t <- 出队列
            遍历与t相连的节点k:
                若k的颜色与t相同, 返回失败
                若k没有染色, 将k染成与t相异的颜色, quque <- k
        返回成功

2. 匈牙利算法
二分图的匹配:
给定一个二分图G, 在G的一个子图M中, M的边集{E}中的任意两条边都不依附于同一个顶点, 则称M是一个匹配.
二分图的最大匹配:
最大匹配指的是所有匹配中含有边数最多的那一组匹配, 其边数称为最大匹配数.
时间内复杂度O(nm)
对于给定的二分图G = G1(n1个点) + G2(n2个点)
find {
    for i = 1:n1
        重置访问状态st
        为节点i查找匹配点：
        for 所有与i相连的未被访问过的点j：
            如果j没有被匹配过或者j的匹配点还有其它点可以匹配(match[j] == 0 || find(match[j]))
                将j与i匹配
                返回成功
    返回失败
}