1. 单链表
1.1 数组模拟
预定义
node[N]: 链表节点值
ne[N]: 链表指向下一个节点的坐标
idx: 全局坐标
初始化:
    node[0] = 0, ne[0] = -1, idx = 0;
插入操作insert(a, b), 在节点a后面插入一个值为b的节点:
    idx++;
    node[idx] = b, ne[idx] = ne[a], ne[a] = idx;
删除操作remove(k), 删除节点k的下一个节点:
    ne[k] = ne[ne[k]]

1.2 传统的数据结构
通常由值以及指向下一个节点的指针组成: 
struct NodeList {   
    int val;
    NodeList *next;
}

应用
LRU: Least Recently Used
设计一种数据结构, 以capacity作为最大的缓存容量, 在此基础上实现两个API, 其时间复杂度为O(1)
(1) put(k, v)
将键值对{k, v}存入
(2) get(k)
获取键k对应的值v, 如果k不存在, 则返回-1

根据时间复杂度, 可以猜想到数据结构是hash+linklist
操作            put         get
hashtable       O(n)        O(1)
linklist        O(1)        O(n)