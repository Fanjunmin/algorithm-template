segment tree线段树
1. 简介 
线段树是一种基于分治思想的二叉树
1.1 每一个节点代表一个区间, 节点的值可代表该区间的某种属性, 比如区间和或者区间最大值
1.2 每个叶子节点代表一个长度为1的区间 [x, x]
1.3 对于区间[l, r], 其左孩子[l, mid], 右孩子[mid+1, r], 其中mid=(1+r)>>1
类似于建堆的过程
节点x的左孩子编号为2x+1, 右孩子编号为2x+2
对于任意一个节点x, 其父节点为(x-1)/2
N个节点的满二叉树最大为4N, 因此保存线段树的数组长度不要小于4N

2. 算法API介绍
假设数组为data[N], 线段树tree[4*N] {l,r,val}
以区间最大值为例:
data[l, r] = max(data[l, mid], data[mid+1, r])
2.1 建树
线段树的初始节点p=0对应区间[0, N-1]
build_tree(p=0, l=0, r=n-1);
递归进行(mid=l+r>>1)
左子树 build_tree(2*p+1, l, mid);
右子树 build_tree(2*p+2, mid+1, r);
左右合并 tree[p].val = max(tree[2*p+1].val, tree[2*p+2].val);
递归的出口为l==r, 此时tree[p]=data[l];

2.2 单点[x,x]修改 {x, v}: index=x对应需要修改的value=v
初始状态
update(p=0, index=x, value=v);
递归进行(mid=tree[p].l+tree[p].r>>1)
index=x在左子树:
    x<=mid, update(2*p+1, x, v);
index=x在右子树:
    x>mid, update(2*p+2, x, v);
左右合并 tree[p].val = max(tree[2*p+1].val, tree[2*p+2].val);
递归出口是tree[p].l==tree[p].r, 此时修改tree[p].val=v;

2.3 区间查询[l, r]
初始状态
query(p=0, l, r);
递归进行(mid=tree[p].l+tree[p].r>>1)
当左节点与[l,r]有重叠, 递归访问左子树
    l<=mid, query(2*p+1, l, r)
当右节点与[l,r]有重叠, 递归访问右子树
    l>mid, query(2*p+2, l, r)
递归出口是当区间[l,r]覆盖了当前的区间
即l<=tree[p].l && tree[p].r<=r 或者[tree[p].l, tree[p].r]包含于[l, r], 返回tree[p].val;